$ Puzzle Machinarium
$
$ This puzzle is from the Computer Game Machinarium and is played on a 
$ square n x n grid. The user puts a token on a field of the grid and tries to
$ touch upon every single location in the grid. 
$ There are black spots on the grid, where the token cant move to.
$ The token cant revisit a field.
$ The token can only move horizontally and vertically.
$
$ by 150001088

language ESSENCE' 1.0

given initial_grid: matrix indexed by [int(1..p), int(1..p)] of int(0, 1)

$ maximum number of moves in a clear field
letting n be 4
letting MAX_MOVES be domain int(0..n-1)
letting p_test = [i | i:int(p..p); int(0..p-1)]
$ find the positions of the token
find tokenPosnX : matrix indexed by [MAX_MOVES] of int(0..p-1)
find tokenPosnY : matrix indexed by [MAX_MOVES] of int(0..p-1)
find moveX : matrix indexed by [MAX_MOVES] of int(-1..1)
find moveY : matrix indexed by [MAX_MOVES] of int(-1..1)

such that
$ allowed moves change the next X coordinate into the previous plus move
forAll i : int(0..n-2) . 
	tokenPosnX[i+1] = tokenPosnX[i] + moveX[i],

$ allowed moves change the next Y coordinate into the previous plus move
forAll i : int(0..n-2) . 
	tokenPosnY[i+1] = tokenPosnY[i] + moveY[i],

$ cant be the same (0,0) (1,1) (-1,-1) but also not the negative of the other (-1,1) or (1,-1)
forAll i : int(0..n-1) . 
	moveY[i] != moveX[i] /\ moveY[i] != -moveX[i],

$ every field is visited, each field is visited if all X,Y combinations are different
gcc(tokenPosnX, [i|i:int(0..p-1)],p)
$ alldifferent_except(tokenPosnX,p)
